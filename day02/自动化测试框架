自动化测试框架：
优点：
    脚本的可扩展性好
    可维护性好
    可复用性好
    执行通过率高
线性脚本（最早的一种）：
    录制回放的工具，脚本录制后直接执行
数据驱动的自动化框架（用的比较多）：
    测试数据跟测试脚本分离，数据通过外部输入（xml,csv,yaml,数据库）
    灵活性比较高
    专业知识比较多，复杂相对于线性脚本
关键字驱动自动化框架：
    selenium是典型的关键字驱动框架，封装各种基本的操作，开发脚本时，调用已经写好的关键字
    通用性比较好，关键字封装后，使用起来比较简单
    难度高，成本高
模块化自动化框架：
    把系统划分为模块，按模块测试
    把复杂的步骤分为易管理的部分
混合的框架：
    综合上面的几种优点

测试数据分层：
环境数据：ini文件中，会疆场变化的
接口地址：代码中的常量文件
测试数据：yaml管理

思考一个自动化测试的工程中，可能或包含哪些内容？
    金融项目：
        通用的操作：数据库的操作，yaml文件读写，ini文件的读写，断言，日志，email，CSV读写
        业务特有的操作：用户管理，项目管理，
    租车系统：
        数据库的操作，yaml文件读写，ini文件的读写，断言，日志，email，CSV读写
        客户管理，车辆管理

代码分层：
    CAW:common action word ,与业务无关的一层
    BAW:business action word,业务相关的AW,按模块管理接口
    脚本层：跟用例对应的，调用CAw,BAW中封装的方法的实现
    调用关系是上层调用下层提供的AW，但是下层不能调用 上层封装的AW
    只有脚本层访问数据，其它层如果涉及到数据，通过参数传入

包和目录的区别：
    目录的文件可以直接被调用
    包下面有__init__.py文件，不可以被直接调用

测试逻辑/测试脚本/测试步骤：清理环境：执行脚本之前，环境是怎么样的，执行完毕把环境恢复成什么样的
注册成功的步骤：
    下发注册的请求
    检查结果：
        接口返回值的检查
        用户是否注册成功：
            方式1：调用查询类的接口，能查询到注册的用户，说明注册成功
            方式2：用注册成功的用户登录，登录成功说明注册成功
            方式3：检查数据库，数据中存在该用户的记录说明注册成功
    清理环境：1.调用接口清理；2.操作数据库清理


注册失败的步骤：
    下发注册的请求
    接口返回值的检查

重复注册的步骤：
    下发注册的请求，注册成功
    下发注册的请求，重复注册
    接口返回值的检查

登录的接口测试步骤：
    注册用户
    下发登录的请求
    检查结果
    删除注册的用户


CD（Continuous Deployment）持续部署
CI（Continuous Integration）持续集成
CD（Continuous Delivery）持续交付

持续集成的好处：
    降低风险
    减少重复的过程
    任何时间、任何地点生成可部署的软件
    增强项目的可见性
    建立团队对开发产品的信心

装修房子：
线路、地板、家具，再去检查各环节是否有问题，修改的成本比较高
电路装好之后，检查是否有问题